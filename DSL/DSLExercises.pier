!Crafting a Simple Embedded DSL with Pharo

In this tutorial we develop a simple Domain Specific Language (DSL) for rolling dice. Players of games such as Dungeon and Dragons are familiar with the DSL we implement. An example of such DSL is

[[[
2 D20 + 1 D6
]]]

This example means that we should roll two times a 20-faces dice and one time a 6 faces dice. This tutorial shows how we can (1) simply reuse traditional operator such as ==+==, (2) develop an embedded DSL and (3) use class extensions (aka open classes).

!! Getting started

Using the code browser, define a package named ==Dice==.

!!! Defining the class Dice

In this package, define a class ==Dice== with an instance variable ==faces==.

[[[
Your code here
]]]

In the ==initialize== protocol, define the method ==initialize== as follows. This method simply sets the default number of faces to 6.

[[[
Your code here
]]]


!!! Creating a test

It is always empowering to verify that the code we write is always working as we defining it. For this purpose we create a unit test.

So we define the class ==DiceTest== as a subclass of ==TestCase==.

[[[
TestCase subclass: #DiceTest
    instanceVariableNames: ''
    classVariableNames: ''
    poolDictionaries: ''
    category: 'Dice'
]]]

We add a new test ==testInitializeIsOk== to make sure we can create new dice.

[[[
DiceTest>>testInitializeIsOk
    self shouldnt: [ Dice new ] raise: Error
]]]

!! Rolling a dice

To roll a dice we use the method  ==atRandom== from ==Number==. This method randomly chooses a
number between one and the receiver. For example ==10 atRandom== draws a number between 1 and 10.
Therefore we define the method ==roll== as follows:

[[[
Your code here
]]]

Now we can create a new instance of Dice, send it the message  ==roll==, and get a result.
Do ==Dice new inspect== and then type in the bottom pane ==self roll==.
You should get an inspector like the one shown in Figure *figDiceNoDetail*. With it you can interact with the dice by writing expressions in the bottom pane.

+Inspecting and interacting with a Dice>file://figures/DiceNoDetail.pdf|width=50|label=figDiceNoDetail+

!!! Creating another test

We define a test that verifies that rolling a new created dice with a default 6 faces only returns
value comprised between 1 and 6. This is what the following test method is actually specifying.

[[[
DiceTest>>testRolling
    | d |
    d := Dice new.
    100 timesRepeat: [ self assert: (d roll between: 1 and: 6) ]
]]]

!! Instance creation interface

Now, we would like to get a simpler way to create ==Dice== instances. For example we want to create a 20-faces dice as follows: ==Dice faces: 20==. Let us define a test for it.

[[[
DiceTest>>testCreationIsOk
    self shouldnt: [ Dice faces: 20 ] raise: Error
]]]

We define the class method ==faces:== as follows. The method first creates an instance, then sends it the message ==faces:==, and returns the instance.

[[[
Your code here
]]]

You may want to send the ==yourself== message to simplify the code of this method. ==yourself== is a simple method defined on the class ==Object==. ==yourself== returns the receiver of a message and the use of ==;== sends the message to the receiver of the previous message (here ==faces:==), therefore ==yourself== is sent to the object resulting from the execution of the expression ==self new== (which returns a new instance of the class ==Dice==).

This method can not yet be executed because you first have to implement the instance-side method ==faces:==. Do that now.

[[[
Your code here
]]]

Now your tests should pass and this is good moment to save your code.

So even if the class ==Dice== could implement more behavior, we are ready to implement a dice handle.

!! First specification of a dice handle

Let us define a new class ==DiceHandle== that represents a dice handle.

Here is the API that we would like to offer for now. We create a new instance of the handle then add some dice to it.

[[[
DiceHandle new
    addDice: (Dice faces: 6);
    addDice: (Dice faces: 10);
    yourself
]]]

!!! Testing Handle Dice

Of course we define a test for this new class. We define the class ==DiceHandleTest== as follow.

[[[
TestCase subclass: #DiceHandleTest
    instanceVariableNames: ''
    classVariableNames: ''
    poolDictionaries: ''
    category: 'Dice'
]]]

We define a new test method as follows.

[[[
DiceHandleTest>>testCreationAdding
    | handle |
    handle := DiceHandle new
        addDice: (Dice faces: 6);
        addDice: (Dice faces: 10);
        yourself.
    self assert: handle diceNumber equals: 2.
]]]

With another test, we can make sure we can add two times a similar dice.

[[[
DiceHandleTest>>testAddingTwiceTheSameDice
    | handle |
    handle := DiceHandle new
        addDice: (Dice faces: 6);
        yourself.
    self assert: handle diceNumber equals: 1.
    handle addDice: (Dice faces: 6).
    self assert: handle diceNumber equals: 2.
]]]

!!! Defining the DiceHandle class

This class defines one instance variable named ==dice== to hold a collection of dice.

[[[
Your code here
]]]

When an instance is initialized, the instance variable ==dice== must contain an empty ==OrderedCollection==.

[[[
Your code here
]]]

Then we define a simple method to add a dice to the list of dice of the handle.

[[[
Your code here
]]]

Now you can execute the code snippet and inspect it. You should get an inspector as shown in Figure *diceHandleNoDetail*.

[[[
DiceHandleTest>>testAddingTwiceTheSameDice
    self assert: handle diceNumber equals: 2.
]]]

[[[
DiceHandle new
    addDice: (Dice faces: 6);
    addDice: (Dice faces: 10);
    yourself
]]]

+Inspecting a dice handle>file://figures/DiceHandleNoDetail.pdf|width=50|label=diceHandleNoDetail+

Finally we should add the method ==diceNumber== to the ==DiceHandle== class to get the number of dice of the handle. The method returns the size of the ==dice== collection.

[[[
Your code here
]]]

Now your tests should pass and this is good moment to save your code.

!! Improving the programmer experience

Now when you open an inspector you cannot see well the dices that compose the dice handle. Click on the dice instance variable and you only get a list of =="a Dice"== without further information as you can see in Figure *diceHandleNoDetail*.

We enhance the ==printOn:== method of the ==Dice== class to provide more information. Here we simply add the number of faces surrounded by parenthesis.


[[[
Your code here
]]]

Now in your inspector you can see the number of faces a dice handle has as shown by Figure *diceDetail* and it is now easier to check the dice contained inside a handle (see Figure *diceHandleDetail*).

+Dice details>file://DiceDetail.png|width=50|label=diceDetail+

+Dice Handle with more information>file://DiceHandleDetail.png|width=50|label=diceHandleDetail+

!! Rolling a dice handle

Now we can define the rolling of a dice handle by simply summing the dice rolls.

[[[
Your code here
]]]

We can now send the message ==roll== to a dice handle.

[[[
handle := DiceHandle new
    addDice: (Dice faces: 6);
    addDice: (Dice faces: 10);
    yourself.
handle roll
]]]

!! Role playing syntax

We are ready to offer a syntax following practice of role playing game, i.e., using ==2 D20== to create a handle of two 20-faces dice.  For this purpose we use class extensions: we define methods in the class ==Integer==. We want these methods to only be available when the package ==Dice== is be loaded.

First let us specify what we would like to obtain by writing a new test in the class ==DiceHandleTest==. Remember to always take  any opportunity to write tests.  When we execute ==2 D20== we  should get a new handle composed of two dice and can verify that. This is what the method ==testSimpleHandle== is doing.

[[[
DiceHandleTest>>testSimpleHandle
    self assert: 2 D20 diceNumber equals: 2.
]]]

Verify that the test is not passing! It is much more satisfactory to get a test running when it was not working before. Now define the method ==D20== with a protocol name ==*Dice==. The ==*== (star) prefixing the protocol name indicates that the protocol belongs to another package.

The method ==D20== simply creates a new dice handle, adds the correct number of dice to this handle, and returns it.

[[[
Your code here
]]]

Your test should pass and this is probably a good moment to save your work.

We could do the same for  different face numbers: 4, 6, 10 and 20.
But we should avoid duplicating logic and code. We first introduce a new method ==D:== in the ==Integer== class and, based on it, we define all the others.

[[[
Your code here
]]]

The ==D20== method should now look like:

[[[
Integer>>D20
    ^ self D: 20
]]]

We have a compact form to create dice and we are ready for the last part: the addition of handles.

!!! Adding handles

Now we can simply support the addition of handles. Let us write a test first.

[[[
DiceHandleTest>>testSumming
    | handle |
    handle := 2 D20 + 3 D10.
    self assert: handle diceNumber equals: 5.
]]]

We define a method ==+== on the ==HandleDice== class. In other languages this is often not possible or is based on operator overloading. In Pharo ==+== is just a message as any other. Therefore we can define the ==+== method on the classes we want.

What is the semantics of adding two handles? Should we modify the receiver of the expression or create a new handle? In this tutorial we choose the functional style and decide that a new handle should be created. As a result, the method ==+== first creates a new handle then adds to it the dice of the receiver and the one of the handle passed as argument. Finally, ==+== must return the newly created handle.

[[[
Your code here
]]]

Now we can execute ==(2 D20 + 1 D6) roll== nicely and start playing games, of course.

!! Conclusion

This tutorial illustrates how to create a small DSL based on the definition of some domain classes (here ==Dice== and
 ==DiceHandle==). We used class extension (on ==Integer==) to simplify the instanciation of these classes.
This tutorial shows that in Pharo we can use standard operators to express natural models.

% Local Variables:
% eval: (flyspell-mode 1)
% End:
