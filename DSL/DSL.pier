!Crafting an Embedded DSL


In this chapter we will develop a simple DSL for rolling dice. An example of such DSL is ==2 D20 + 1 D6== which means that we should roll two times a 20-faces dice and one time a 6 faces dice. This chapter will show how we can (1) simply reuse traditional operator such as ==+==, (2) develop an embedded DSL and show a usage of class extensions.


!! Getting started



!!! Defining the class Dice


[[[
Object subclass: #Dice
	instanceVariableNames: 'faces'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Dice rolling'
]]]


in the initialize release category define the method ==initialize== as follows
[[[
Dice>>initialize 
	super initialize.
	faces := 6
]]]

To roll a dice we will use the method from Number ==atRandom== which draw randomly a 
number between one and the receiver. 

[[[
Dice>>roll

	^ faces atRandom
]]]

Now we can create an instance ==Dice new== and send it the message  ==roll== and get a result.
Do ==Dice new inspect== and then type in the bottom pane ==self roll==.

We would like to get a simpler way to create Dice. We define the class method ==faces:== as follows

[[[
Dice>>faces: aNumber
	
	^ self new faces: aNumber; yourself
]]]

This method is strictly equivalent to the one below that creates an instance, then set the number of faces of the receiver and finally return the newly instance. 
[[[
Dice>>faces: aNumber

	| instance |
	instance := self new.
	instance faces: aNumber.
	^ instance
]]]

Since we did not create yet the method ==faces:== this is now the time to define it.


[[[
Dice>>faces: aNumber

	faces := aNumber
]]]


Now you can create an instance executing ==Dice faces: 10== and get a 10 faces dice. 



[[[
TestCase subclass: #DiceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'RolePlaying'
]]]







[[[
DiceTest>>testCreationIsOk
	
		self shouldnt: [ Dice faces: 10 ] raise: Error
]]]

!! Handle of Dice

[[[
Object subclass: #DiceHandle
	instanceVariableNames: 'dice'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'RolePlaying'
]]]

[[[
DiceHandle>>initialize
	super initialize.
	dice := OrderedCollection new.
]]]

[[[
DiceHandle>>addDice: aDice 
	dice add: aDice
]]]

!!! Creating a Handle

[[[
DiceHandle new 
	addDice: (Dice faces: 6);
	addDice: (Dice faces: 10);
	yourself
]]]

Now when you open an inspector you cannot see well the dice. so we will enhance the ==printOn:== method.


[[[
Dice>>printOn: aStream

	super printOn: aStream.
	aStream nextPutAll: ' (', faces printString, ')'
]]]


!!! Testing Handle Dice
[[[
TestCase subclass: #DiceHandleTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'RolePlaying'
]]]

[[[
DiceHandleTest>>testCreationIsOk

	| handle |
	handle := DiceHandle new 
			addDice: (Dice faces: 6);
			addDice: (Dice faces: 10);
			yourself.
	self assert: handle diceNumber = 2.
]]]

Now we should add the method diceNumber to the ==DiceHandle==
[[[
DiceHandle>>diceNumber  

	^ dice size
]]]

Now we can define the rolling of a handle of dice by simply summing the dice roll.
[[[
DiceHandle>>roll
	
	| res |
	res := 0.
	dice do: [ :each | res := res + each roll ].
	^ res
]]]

[[[
 
]]]

[[[
 
]]]

[[[
 
]]]

[[[
 
]]]

[[[
 
]]]

[[[
 
]]]

[[[
 
]]]

[[[
 
]]]

[[[
 
]]]

[[[
 
]]]

[[[
 
]]]

[[[
 
]]]

[[[
 
]]]

[[[
 
]]]

[[[
 
]]]

[[[
 
]]]

[[[
 
]]]

[[[
 
]]]

[[[
 
]]]

[[[
 
]]]

[[[
 
]]]

[[[
 
]]]

[[[
 
]]]



% Local Variables:
% eval: (flyspell-mode -1)
% End:
