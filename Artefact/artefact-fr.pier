!Générer des documents PDF avec Pharo

Le format PDF d'Adobe est probablement l'un des formats de fichier les plus répandu. Utilisé quotidiennement, il rend quantité de services en permettant la production de documents graphiques, lisibles et échangeables entre pratiquement toutes les plate-formes matérielles ou logicielles existantes. Si vous recevez une facture, suite à un achat sur un site de e-commerce ou si vous téléchargez un rapport, un livre, une thèse ou encore un formulaire administratif, ces fichiers seront fort probablement des documents PDF consultables sur votre ordinateur, votre téléphone ou votre tablette. Sur l'ensemble de ces supports, ils conserveront une apparence identique. Pour les programmeurs, ce format est devenu incontournable et doit faire parti de la trousse à outils de base d'un outil de développement. Pour Pharo, c'est le framework Artefact qui prend en charge la conception et la génération de documents PDF.

!!Aux sources du projet

Artefact est un framework PDF original. Il base la définition d'un document PDF sur une description objet. Pour lui, l'intégralité des éléments composant un fichier PDF se résume à une arborescence d'objets. Le document est un objet contenant d'autres objets correspondant à des pages. Sur chacune des pages, les éléments imprimables ou non visibles sont également des objets. Ceux ci ont ainsi la possibilité d'être réutilisés dans un même document mais aussi dans plusieurs documents. Ces éléments peuvent être aussi simple qu'un texte ou une image mais également, être un composant complexe doté d'un comportement évolué et d'une apparence particulière. Artefact propose ainsi par défaut des éléments tels que des paragraphes ou encore des tableaux permettant de générer rapidement des rapports. La force de ces éléments est qu'ils sont indépendants les uns des autres. L'ordre dans lequel vous les positionnez dans le document n'influe pas sur leur apparence. Contrairement à de nombreux frameworks PDF qui exploitent une notion de flux dans la définition des styles (un texte bleu sera suivi d'un autre texte bleu en l'absence d'une directive de style différente), Artefact considère que chaque élément intègre une feuille de style qui lui est propre. Si un attribut n'est pas défini dans l'élément, Artefact exploite alors une feuille de style par défaut définie au niveau du document.

Cette autonomie des éléments et cette gestion des styles est une caractéristique forte d'Artefact. Elle permet de générer facilement un document et de le personnaliser rapidement pour une exploitation particulière. Efficacité, productivité et extensibilité ont été les mots clés qui ont guidé le design du produit.

!!Concept, caractéristiques et limitations

Les concepts d'Artefact sont maintenant stabilisés et il est déjà utilisé dans le monde professionnel par des entreprises utilisant Pharo. Pourtant, c'est encore un produit jeune et il est en plein développement. Pour cette raison, il est important d'énumérer ses fonctionnalités actuelles et de connaître ses limitations.

Artefact supporte la définition d'un document PDF, permet de définir des meta informations telles que le titre ou encore l'auteur, gère les options d'affichage lors de l'ouverture du document dans un lecteur compatible avec cette fonctionnalité et sait générer des documents PDF compressés.

Chaque page d'un document PDF peut se voir attribuer un format et une orientation particulière. Artefact propose par défaut un ensemble de formats de documents couvrant les besoins courants et il vous est possible de l'étendre pour des usages particuliers.  Une page obtient sa position définitive dans un document qu'à partir du moment ou elle a été ajoutée au document. Chaque page est autonome et cela permet donc de générer des documents à architecture variable. 

Sur chaque page, Artefact dispose des éléments simples ou complexes. Un élément complexe est généralement défini à l'aide des éléments simples ou pourquoi pas, à partir d'autres éléments complexes. C'est le principe de composition qui est ici utilisé. Chaque élément est indépendant et se positionne par rapport au coin supérieur gauche d'une page. Artefact supporte la gestion des niveaux de gris ou l'utilisation de couleurs définis selon le modèle RVB (chaque composante de la couleur est représentée par un octet). Les fontes de caractères sont celles imposées par la spécification PDF mais Artefact ne supporte pas les fontes true type (TTF). Il est possible d'insérer des images dans un document PDF mais seul le format JPEG est actuellement géré. Artefact ne gère pas la définition de champs interactifs de saisie, l'intégration de code Javascript ou encore les aspects sécurités de PDF tels que les certificats.

Bien évidemment, ces spécification sont susceptibles d'évoluer au fur et à mesure des évolutions du framework. Artefact possède une architecture simple facilitant l'extensibilité et le support de nouvelles fonctionnalités. Restez connecté, le meilleur reste à venir.

!!Prise en main d'Artefact en 10 minutes
Vous programmez en Pharo et vous voulez générer des documents PDF dans votre application. Vous ne savez pas comment faire ? Ne soyez pas inquiet, dans quelques minutes, vous aurez produit votre premier document PDF. 

Tout d'abord, il vous faut ajouter le framework Artefact à votre environnement de travail Pharo. La bonne nouvelle est qu'aucune librairie native n'est nécessaire pour faire fonctionner Artefact. Celui ci est écrit entièrement en Pharo. Quelque soit votre plateforme d'exécution (Microsoft Windows, Mac OS X, Linux, Android, IOS, etc.), Artefact sera disponible et utilisable.

!!!Installation du projet Artefact
Le projet Artefact est disponible sur le site web de dépot SmalltalkHub. Pour installer Artefact, ouvrez un espace de travail (Workspace) et dedans, faites un copier/coller du script de chargement afin de l'exécuter. Ce script est fourni sur la page du projet Artefact et permet d'automatiser les étapes de l'installation. La configuration déclenche le téléchargement d'Artefact ainsi que celui du projet Unit destiné à la manipulation des différentes unités de mesure. Par défaut, la version récupérée sera une version stable (#stable) destinée à la mise en production.   

Vous pouvez maintenant parcourir les principaux paquets et classes composant Artefact. Le paquet Artefact-Demos contient de nombreux exemples d'utilisation et permet une prise en main en douceur du framework. Le paquet Artefact contient les éléments principaux tels que les documents, les pages ou encore les feuilles de styles mais également une documentation électronique accessible via le Help Browser. Dans Artefact-Elements-Basic et Artefact-Elements-Composites, vous trouvez les différents composants (texte, formes géométriques, images, etc) proposés de base par le framework. Les fontes sont définies dans le paquet Artefact-Fonts et les formats de documents (A4, A3, ebook, etc.) dans le paquet Artefact-Formats.

!!!"Hello World!"
Vous allez maintenant créer votre premier document PDF, le plus simple qui soit, un texte sur une page. Pour cela, vous devez définir une instance d'un document PDF contenant une page, sur laquelle vous positionnerez un composant texte.

Ouvrez un espace de travail et exécutez le code suivant pour créer votre document PDF.

[[[
PDFDocument new exportTo: 'helloworld.pdf' asFileReference writeStream
]]]

Une fois l'instance de PDFDocument créée, celle ci est exportée à l'aide d'un stream vers un fichier nommé helloworld.pdf. Par défaut, le document PDF produit est placé dans le répertoire de Pharo. L'ouverture de ce fichier à l'aide d'un lecteur PDF indique que le document est vide. C'est un résultat normal puisque vous n'avez pas encore défini et ajouté une page au contenu du document.

Enrichissons le code précédent en ajoutant un page au document.

[[[
PDFDocument new add: (PDFPage new); exportTo: 'helloworld.pdf' asFileReference writeStream
]]]

L'ouverture de ce fichier donne un résultat différent puisque votre document contient maintenant une page vierge. Artefact suit la philosophie "Convention over configuration". Seuls les paramètres spécifiques doivent être définis. Ainsi, par défaut, Artefact a attribué un format A4 à votre document, fixé l'orientation en portrait et initialisé les méta informations avec des valeurs par défaut.

Nous terminons notre premier document en ajoutant un composant texte sur la page.

[[[
PDFDocument new add: 
	(PDFPage new add: 
		(PDFTextElement new text: 'Hello World!';from:10mm@10mm)
	); exportTo: 'helloworld.pdf' asFileReference writeStream
]]]

Pour contenir le texte, nous avons besoin d'un composant de type PDFTextElement que nous ajoutons sur la page. Nous définissons ensuite sa position à l'aide de la méthode #from:. L'utilisation du framework Unit autorise l'utilisation d'unités métriques tels que les millimètres (mm), les centimètres (cm) ou encore les pouces (inch). Ces coordonnées sont définies à partir de l'angle supérieur gauche de la page. 

Artefact utilise un ensemble de valeurs par défaut afin de réduire au maximum le nombre de lignes de code nécessaires à la production d'un document. Le texte est donc écrit en noir, utilise une fonte (Helvetica) et une taille par défaut.

Ce premier exemple a permis d'introduire les concepts de bases d'Artefact et a démontré la facilité avec laquelle il vous est possible de générer un document PDF à partir de Pharo. Dans la suite de ce chapitre, nous allons approfondir vos connaissances sur le framework Artefact et vous permettre de créer des documents PDF complexes.

!!Définir un document

Artefact représente un document PDF à l'aide de l'objet PDFDocument. Cet objet est un conteneur destiné à recevoir des pages. C'est l'ordre dans lequel ces pages sont ajoutées qui définit l'organisation des données au sein de l'objet PDFDocument et non pas l'ordre dans lequel les pages sont créées. Ce mode de fonctionnement vous permet donc de générer des documents dont le contenu sera dans un premier temps dynamiquement produit puis organisé dans un second temps. L'objet PDFDocument dispose également d'options avancées portant sur le format du document, la gestion de la compression, l'ouverture dans le lecteur PDF ou encore la définition de méta informations.

!!!Ajouter des pages

Pour ajouter des pages dans un document, vous disposez d'une méthode nommée #add: qui ajoute la page à la suite de celles déjà présentes dans le document. Le fonctionnement est proche d'une pile FIFO (First In First Out). Lors de la génération du document, Artefact parcoure la liste des pages en partant de la plus anciennement ajoutée jusqu'à la dernière.
 
!!!Spécifier les propriétés du documents

Un document PDF peut être configuré pour fixer le format utilisé et gérer la compression.

!!!!Format et orientation du document

Par défaut, un document est généré en respectant le format A4 mais celui ci n'est pas le seul disponible dans Artefact. Dans le paquet Artefact-Formats, une liste de formats a été définie et couvre de nombreux besoins. Vous pouvez ainsi produire des documents en A3 (PDFA3Format), au format Letter (PDFLetterFormat) mais aussi dans un format adapté aux liseuses électroniques (PDFEbookFormat). Si vous avez besoin d'un format particulier, il vous suffit de le définir. Un format est simplement exprimé par la valeur de retour de la méthode #defaultSize.

L'objet PDFDocument possède une méthode #format: permettant de spécifier le format de toutes les pages du document. Pour chaque page, cette valeur sera prise par défaut si aucun format particulier n'est défini à son propre format. L'exemple suivant génère un document utilisant le format A3:

[[[
PDFDocument new 
	format: (PDFA3Format new); 
	add: (PDFPage new); exportTo: 'A3.pdf' asFileReference writeStream
]]]

Ces formats sont également utilisés pour spécifier l'orientation des pages en choisissant entre le mode portrait ou le mode paysage. Les deux méthodes sont #setPortrait et #setLandscape.

L'exemple suivant génère un document dans lequel les pages sont au format A3 et orientées en mode paysage.

[[[
PDFDocument new 
	format: (PDFA3Format new setLandscape); 
	add: (PDFPage new); exportTo: 'A3landscape.pdf' asFileReference writeStream
]]]

La sélection par défaut du mode paysage n'exclut pas la possibilité pour une page particulière d'être orientée en mode portrait. Artefact supporte parfaitement des pages de différents formats et de différentes orientations au sein d'un seul et même document.

!!!!Gestion de la compression

Le format PDF supporte la compression des données et c'est une bonne chose. Un document PDF peut contenir d'importants volumes de données dont la présentation graphique doit être décrite avec précision. Afin de réduire au maximum le poid des documents générés, Artefact applique par défaut un algorithme de compression. Si par curiosité, vous voulez désactiver cette option et analyser les données produites, vous disposez de la méthode #uncompressed qui désactive la compression.

L'exemple suivant génère un fichier PDF non compressé:

[[[
PDFDocument new 
	uncompressed; 
	add: (PDFPage new); exportTo: 'uncompressed.pdf' asFileReference writeStream
]]]

Une autre méthode, nommée #compressed, réactive la compression si celle ci a été préalablement désactivée.

!!!!Contrôler l'ouverture du document

Le lecteur Adobe Acrobat supporte différents modes d'affichage à l'ouverture d'un document PDF. Le mode sélectionné est renseigné directement dans le document PDF. Artefact supporte les différentes directives d'affichage à destination du lecteur PDF. Notez que si votre lecteur PDF n'est pas compatible avec ces options, elles seront ignorées.

Les directives fixant le mode d'affichage à l'ouverture d'un document PDF sont réparties en deux catégories: celles fixant la dimension des pages (#fullPage, #fullWidth, #real et #zoom:) et celles fixant l'organisation des pages sur l'écran (#singlePage, #twoPages et #continuousPages). Ces différentes méthodes s'appliquent directement à  une instance de l'objet PDFDocument.

Avec #fullPage, chaque page du document occupe l'intégralité de l'espace d'affichage disponible. Avec #fullWidth, l'affichage est optimisé en fonction de la largeur des pages. Avec #real, l'affichage respecte les dimensions fixées dans le document PDF.

L'exemple suivant génère un document qui occupera tout l'espace d'affichage disponible:

[[[
pdfdoc := PDFDocument new fullPage.
]]]

Avec la méthode #zoom:, vous fixez un rapport d'agrandissement exprimé en pourcentage. L'exemple suivant applique un zoom de 400% à l'ouverture du document:

[[[
pdfdoc := PDFDocument new zoom: 400. 
]]]

Vous pouvez également choisir d'afficher les pages une par une (#singlePage), deux par deux (#twoPages) ou les unes à la suite des autres (#continousPages) comme dans l'exemple suivant:

[[[
pdfdoc := PDFDocument new continousPages. 
]]]

Ces différentes méthodes sont également utilisables conjointement. L'exemple suivant demande l'affichage du document avec un zoom de 200% et un affichage continu des pages:

[[[
pdfdoc := PDFDocument new 
	zoom: 200;
	continuousPages.
]]]

Ces différentes options sont pratiques mais n'oubliez pas que leur fonctionnement dépend des capacités du lecteur PDF que vous utilisez.

!!!!Renseigner les méta informations

Chaque document PDF contient un ensemble d'informations sur ses origines. Ces données ne sont pas à négliger, en particulier si votre document est destiné à alimenter une solution de type GED (Gestion Electronique de Documents) ou fait parti d'un workflow éditorial. Grâce à ces informations, il est possible de faire des recherches parmi un ensemble de documents PDF et de sélectionner par exemple, ceux écrits par un auteur précis ou encore ceux pour lesquels certains mots clés ont été spécifiés.

Artefact implémente ces informations à l'aide de l'objet PDFMetaData. A chaque nouvelle instance de PDFDocument, une instance de PDFMetaData est associée et est accessible via la variable d'instance metaData. Par défaut, le producteur est fixé à 'Artefact' pour renseigner la nature du logiciel utilisé pour générer le fichier PDF. Vous pouvez indiquer le titre du document, un sujet ou un court résumé, préciser le nom du ou des auteurs, fixer une liste de mots clés et enfin définir le créateur du document.

L'exemple suivant génére un nouveau document et renseigne ses méta informations:

[[[
pdfdoc := PDFDocument new.
	
pdfdoc metaData title: 'Document title'; 
	subject: 'subject of the document'; 
	author: 'The Pasta Team'; 
	keywords: 'cool rock best';
	creator: 'Pharo'.
]]]

Artefact supporte l'essentiel des spécifications du format PDF pour la génération de documents. Cependant, un document vide, même bien renseigné, n'a que peu d'utilité. Pour votre futur manuscript ou votre prochain rapport, il vous faut un support pour écrire votre texte ou dessiner vos schémas. Ce sont les pages qui vont jouer ce rôle.

!!Pages, formats et modèles

Les pages sont les supports d'écriture et de dessin présents dans vos documents PDF. Une page a une dimension, une orientation et une position au sein du document PDF. Une page peut être construite à partir d'un modèle qui fournit un fond de page sur lequel est déposé le contenu.

!!!Création des pages

Une page est représenté par une instance de l'objet PDFPage. La façon la plus simple de construire une nouvelle page est donc:

[[[
	page := PDFPage new.
]]]

A ce stade, vous pouvez écrire et dessiner sur la page à l'aide des composants graphiques fournis par Artefact. Une fois le contenu de la page défini, il vous faut ajouter la page dans le document PDF. Une page est ajoutée à l'aide de la méthode  #add: à la suite des pages déjà présentes dans le document.

[[[
	pdfdoc := PDFDocument new.
	page := PDFPage new.
	pdfdoc add: page.
]]]
  
Par défaut, une page adopte les dimensions et l'orientation du document. Si votre document PDF est en A4 paysage, toutes les pages ajoutées utiliseront ces paramètres. Artefact permet d'attribuer à chaque page des dimensions et une orientation spécifiques. Vous pouvez ainsi mélanger dans un même document des pages ayant des caractèristiques différentes. Certaines seront en portrait, d'autres en paysage. D'autres seront en A3 alors que le document sera en A4. 

Pour cela, chaque instance de PDFPage dispose d'une méthode #format: qui reçoit une instance de PDFFormat. L'exemple qui suit génère un document de deux pages. La première utilise le format par défaut du document, la seconde est en A4 paysage.

[[[
	pdfdoc := PDFDocument new.
	page1 := PDFPage new.
	page2 := PDFPage new format: (PDFA3Format new setLandscape).
	pdfdoc add: page1; add: page2.
]]]


!!!Modèle

Un modèle (PDFTemplate) hérite de la classe PDFPage. Il s'agit d'une page ayant un contenu prédéfini et constituant le fond de page sur lequel vous écrivez ou dessinez. Un fond de page peut être constitué par un entête de lettre, un haut et un bas de page pour un rapport, une surface délimitée pour des travaux de mise en page. Le paquet Artefact-Templates propose deux exemples de modèles pour produire la pochette d'un disque compact ou d'un DVD. Le code suivant produit une page A4 sur laquelle sont dessinés les contours d'une pochette d'un CD.

[[[
	pdfdoc := PDFDocument new.
	cover := PDFCompactDiscTemplate new.
]]]

Un modèle est défini à l'aide de la méthode #drawTemplate qui ajoute les composants graphiques d'Artefact à la page et constitue ainsi le fond de page.

!!Composition et agencement du contenu rédactorial

Le contenu des pages est défini à l'aide de composants graphiques. C'est une idée forte dans Artefact qui est basé sur le concept de composants réutilisables permettant d'écrire et de dessiner sur une page. Artefact dispose de composants elémentaires qui réalisent des opération simples tel que dessiner une ligne, mais également, de composants complexes pouvant, par exemple, afficher des données dans un tableau ou encore générer un code barre. Bien évidemment, il est possible de définir et de diffuser de nouveaux composants. Artefact utilisant le principe de composition, un composant complexe est logiquement un assemblage d'autres composants.

!!!Comportement générique des composants

Les composants graphiques d'Artefact adoptent un comportement générique afin de gérer leur positionnement sur la page ainsi que leur dimensionnement. Un repère orthonormé, dont l'origine est en haut à gauche de la page, est utilisé pour indiquer l'emplacement d'un composant. Les valeurs sont exprimées à l'aide d'unités telles que mm, cm ou inch.

!!!!Positionnement des composants

La méthode de classe #from: permet d'instancier un composant graphique et de fixer sa position. L'exemple suivant utilise un composant PDFTextElement et la place à 15 mm du bord gauche et à 30 mm du haut de la page:

[[[
	PDFTextElement from: 15mm @ 30 mm
]]]

En complément du positionnement, Artefact propose également des constructeurs fixant simultanément l'emplacement et la dimension d'un composant.

!!!!Dimensionnement des composants

Vous disposez de deux moyens pour indiquer les dimensions d'un composant. Avec la méthode #from:to:, vous préciser la position de départ et la position de fin d'un composant. L'exemple suivant dessine un rectangle, dont l'origine est 15 mm du bord gauche de la page et 30 mm du haut de la page. Son dessin se termine à 90 mm du bord gauche de la page età 80 mm du haut de la page:
[[[
	PDFRectElement from: 15mm @ 30 mm to: 90mm @ 80mm
]]]

Avec la méthode #from:dimension:, vous fixez la position de départ du composant et indiquez ses dimensions. 

[[[
	PDFRectElement from: 15mm @ 30 mm dimension: 50mm @ 40mm
]]]

Les méthodes #width et #height retournent la largeur et la hauteur d'un composant.

!!!Les composants élémentaires

Le paquet Artefact-Elements-Basic contient les composants graphiques de base. Ils sont répartis dans trois catégories:
l'écriture de texte,
le dessin de forme géométrique.
l'insertion d'une image.

Pour écrire du texte sur une page, vous devez utiliser le composant PDFTextElement. Le texte à écrire est renseigné à l'aide de la méthode #text. La méthode de classe #from:text: permet faire ces opérations rapidement:

[[[
	PDFTextElement from: 15mm @ 30mm text: 'hello!'
]]]

Artefact dispose de composants pour les principales formes géométriques. La classe PDFLineElement dessine une ligne dont les coordonnées de départ et de fin sont fixées à l'aide #from:to:

[[[
	PDFLineElement from: 15mm @ 30mm to: 90mm@170mm
]]]

La méthode de class #from:angle:length: permet de dessiner une ligne à partir d'une coordonnée de départ, d'un angle et d'une longueur de tracé.

[[[
	PDFLineElement from: 10mm @ 20mm angle: 70 length: 50mm
]]]

Un rectangle est représenté à l'aide de PDFRectElement. La hauteur et la largeur du rectangle peuvent être spécifiés en fournissant les dimensions ou en fixant la position de fin du tracé. Les deux exemples qui suivent sont équivalents:

[[[
PDFRectElement from: 10 mm@10mm dimension: 100 mm @ 30 mm.
]]]

[[[
PDFRectElement from: 10mm@10mm to: 110mm@40mm
]]]

Artefact fourni également une classe PDFPolygonElement destinée au dessin de polygones. Cette forme géométrique est définie par une position de départ et une suite de points composant les différents segments.

[[[  
PDFPolygonElement from: 10mm@10mm points: {
	30mm@30mm. 
	15mm@40mm. 
	5mm@20mm
}
]]]

Les cercles sont définis à l'aide de la classe PDFCircleElement et de la méthode de classe #center:radius: qui spécifie la position du centre du cercle et son rayon.

[[[
	PDFCircleElement center: 100mm@100mm radius: 50mm
]]]

Une courbe de Bezier est représentée par la classe PDFBezierCurveElement et est définie par une position de départ et une suite de points.

[[[
PDFBezierCurveElement from: 10 mm @ 50 mmpoints:{
	0 mm @ 0 mm.
	100 mm @ 20 mm.
	150 mm @ 0 mm.
	50 mm @ 50 mm
}
]]]

Artefact autorise l'insertion d'images au format JPEG dans un document PDF. 

PDFJpegElement
height:
width:
class from:wh:fromStream:
class fromStream:

Les composants élémentaires réalisent des opérations graphiques extrémement simples tel que placer un texte sur une page ou dessiner une ligne. Ils constituent les briques essentielles pour la constitution des composants de haut niveau.

!!!Les composants de haut niveau

!!Créez vos composants

!!Gérer l'apparence avec les feuilles de styles

!!!Qu'est ce qu'une feuille de style ?

!!!Les éléments manipulables avec dans une feuille de style

!!!!Fontes
	utiliser les deux syntaxes (pour montrer que c'est la même chose)
	stylesheet textColor: .....
	textColor: .....

!!!!Couleurs et niveaux de gris

!!!!Alignement

!!!!Pointillés

!!!Généraliser un style 

!!!!Changer le style par défaut du document

!!!!Appliquer un style sur un ensemble d'éléments



