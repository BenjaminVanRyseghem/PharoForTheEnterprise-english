!SmallLint: static analysis in Pharo

Being able to check that the code of your application follows certain rules is important to control its quality. Pharo offers SmallLint a tool originally developed by John Brant and Don Roberts to identify several families of problems that code may exhibit. SmallLint defines a list of static analyses grouped by topics and that you can run automatically on your code. In Pharo we go a step further. Package meta-data supports lets the developer tag the violation reported by SmallLint. This way false positives or irrelevant rules do not systematically pollute the rule evaluation. In this chapter we will go step by step on a project and present the features of the Code Critic Browser.

-First version: February 14, 2012
-Last update: May 5, 2012

!! Ensuring Quality

Good design practices are fundamental requisites to address software inherent properties (e.g., complexity, conformity, changeability). But smells are often introduced unintentionally by developers during early software development or software maintenance.

For example, a software designer may adopt well-known established practices during initial design; however, such design may indicate certain structural deficiencies or smells that have arose during the process. 
Also, software developers who are tasked with software maintenance (e.g., develop new features or fix bugs) may introduce smells into the code.  It is important in both cases to address the smells as to reduce the technical debt and maintain a high structural quality of the software.
Awareness of smells enable designers to make well-informed design decisions and developers to avoid introducing smells in the software. 

As defined by Martin Fowler, smells are certain structures in the code that suggest (sometimes they scream for) the possibility of refactoring.
Basically, three types of smells can be found in source code at different levels: architectural, design and implementation. The architectural level includes smells such as god class and cyclical dependency between packages. The design (or micro-architectural) level includes smells such as cyclic hierarchy and large abstraction. Finally, the implementation level includes smells such as improper name length and variables having constant value. SmallLint supports the detection of smells at design and implementation level as well as domain specific ones. In this chapter we cover two first ones as they are provided by default in the Code Critic Browser. 


!! Using the Code Critic Browser

The Code critic Browser propose a set of rules to be checked on your code. 
Once the rules are run, we obtain a set of rule violations, we have several possibilities:


- ''Addressing the problem''. In such a case it can be wise to rerun the rule to verify that it has been addressed.

- ''Marking the problem as a ToDo''. The point here is that tagging a violation as todo makes sure that the violation will not show up as red warning when rules are checked again later. ToDos indicate that the package developer knows that there is an issue that it should be fixed later. Having ToDos is a nice feature because it lets the developer decide when to address a problem while avoiding the tools to always report it as a problems. 

- ''Marking the violation as a tool error''. Indeed a rule may be wrong or irrelevant. We call such error a false positive. Marking a violation as a false positive makes sure that the next time the rule execution will be executed


With the Critics Browser we payed attention that once a developer runs and evaluates the violations (\ie addressing, marking them as todos or false positives), he can be sure that a new execution of the rules on the same code will not report again the same problems. 


!! Conclusion
STON is a practical and simple text-based object serializer. It is handy to exchange information.

% Local Variables:
% eval: (flyspell-mode -1)
% End: