! Keymappings

Keymappings is a library for handling shortcuts in the current Pharo UI library, Morphic. Keymappings models the basic concepts of shortcut handling for a GUI application. Keymappings main task is to define and manipulate shortcuts, that is, the associations between keys combinations and the actions they should trigger.

!! Key combinations

A key combination is a set of keys pressed in a given sequence. Keymappings associates these key combinations to actions in order to create shortcuts.
The simplest key combination is the one formed by a single key. These key combinations, the single key combinations, are created when we send the message ==asKeyCombination== to a Character or Integer object.
It is important to notice that all key combinations are case insensitive. Whenever we create a key combination for the $a character, it will work also for the $A character since they are represented by the same key.

[[[
$a asKeyCombination. "single key combination for the key a."
Character cr asKeyCombination. "single key combination for the space key."
1 asKeyCombination. "single key combination for the home key (because it has the character value 1)."
]]]

In complex GUIs, key combinations tend to be more complex. It is very common to combine single keys with meta keys or modifiers. These meta keys or modifiers are the well known ctrl, shift, alt and command keys. To build a modified key combination, character and integer objects understand the ==control==, ==command==, ==shift== and ==alt== builder messages:

[[[
$a control. "a modified key combination for Ctrl+A"
$a control shift.   "a modified key combination for Ctrl+Shift+A"
]]]

Modern IDEs also make use of key combinations as sequences of simpler key combinations. That is, a sequence of key combinations that launch one only action. For example, the sequence made up from the key combination Alt\+Shift\+X followed by the key T runs JUnit tests in eclipse. In Keymappings we can combine two key combinations as a sequence with the ==,== message:

[[[
$a command shift, $b shift. "key sequence (Cmd+Shift+A, Shift+B)"
]]]

Sometimes, you want to configure an action to be activated in two different cases. Those are Keymapping options, and get activated when one of the options gets activated:

[[[
$a command | $b command          "key combination (Cmd+A or Cmd+B)"
]]]

Finally, since Pharo is a cross platform system and it is important to provide a good user experience by with the most suitable shortcut layout, keymapping implements platform specific shortcuts, which get activated only when running in the specific platform:

[[[
$a command win | $b command unix     "Cmd+A on windows, but Cmd+B on unix"
]]]

!!Per instance shortcut convfiguration

The simplest way to configure a shortcut for a morph is by sending him the ==bindKeyCombination:toAction:== message. The first argument is a key combination and the second one is a block with an action. In the example below, a workspace is created with two shortcuts:

- when Cmd\+Shift\+A is pressed, the workspace is deleted
- when Cmd\+Shift\+D is pressed, an information growl should appear yelling 'this shortcut works!'

[[[ 
w:= Workspace new.
morph := w openLabel: 'keymapping test'.
morph bindKeyCombination: $a shift command toAction: [ morph delete ].
morph bindKeyCombination: $d shift command toAction: [ UIManager default inform: 'this shortcut works!' ].
]]]

GP: talk about optional block arguments

!!Shortcut categories

Shortcuts are grouped and organized by using keymap categories. A Keymap category is a named set of shortcuts grouped in a meaningful way. When a category is applied to a morph, all it's shortcuts are applied to it.
Keymap categories allow to share a set of shortcuts between different morphs, even from different hierarchies.

!!!Defining a keymap category
A Keymap category is defined statically by using a keymap pragma on class side of any class:

[[[
"defining a category"
SystemWindow class>>buildShortcutsOn: aBuilder 
     <keymap>
]]]

A class side method marked as ==<keymap>== will be called with a builder object, which can be used to define a keymap category:

[[[ 
Workspace class>>growlingShortcuts: aBuilder 
    <keymap>
    (aBuilder shortcut:  #growl) 
         category:  #Growling
         default: $g ctrl | $g command mac 
         do: [ :target | UIManager default inform: 'we growl' ] 
         description: 'Growl something'.
]]]

Shortcuts defined through the builder specify the name of the category they belong to, a default key combination, an action, and a description. All this metadata is there to be used as settings in the future.

!!!Attaching and detaching shortcut categories
For a morph to handle a keymap category, and thus the shortcuts inside it, we have to send it the ==attachKeymapCategory:== message with the category name as argument.

[[[
w:= Workspace new.
morph:= w openLabel: 'keymapping test'. 
morph attachKeymapCategory: #Growling.
]]]

Keymapping allows us also to detach a given category from a given morph using the ==detachKeymapCategory:== message with the category name as argument.

[[[
w:= Workspace new.
morph:= w openLabel: 'keymapping test'.
morph attachKeymapCategory: #Growling.
...
...
morph detachKeymapCategory: #Growling.
]]]

!!Internals

!!!Bubbling

Keymappings' shortcuts bubble to their parent (sd: which one?) if not handled, up until the main world morph. That has two main consequences:

- Shortcuts for your application can be designed in a hierarchical way and;
- Every time a shortcut does not work for you, it means that a morph below you has handled it ;) (be careful with text editors that handle many of key combinations)

SD: can't we disable them?
GP: not so far

% Local Variables:
% eval: (flyspell-mode -1)
% End:
