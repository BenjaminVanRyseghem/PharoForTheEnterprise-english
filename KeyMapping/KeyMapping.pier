! Keymappings

Since its 2.0 release, Pharo includes the Keymappings library. Keymappings is a library for configuring shortcuts
for the current UI library (Morphic). It models concepts like: shortcuts, key combinations and event bubbling. It is a very simple library which weâ€™ll introduce gradually in this post.
We gradually present the key concepts.

!! Key combinations

Keymappings main task is its ability to associate a key combination to an action. So we have to build up those key combinations. The simplest key combination is the one that gets activated when a single key is pressed. We call these combinations single key combinations. We create them using the message ==asShortcut==.

[[[
$a asShortcut. "single key combination for the key a."
Character cr asShortcut.   "single key combination for the space key."
]]]


Usually key combinations get a bit more complex. It is very common to combine single keys with meta keys or modifiers. These meta keys or modifiers are the well known ctrl, shift, alt and command keys. To build a modified key combination we can do as follows:

[[[
$a ctrl. "a modified key combination for Ctrl+A"
$a ctrl shift.   "a modified key combination for Ctrl+Shift+A"
]]]

important
It is important to notice that all key combinations are not case sensitive. It takes a and A characters as the same, since they are the same key.

Have you ever used emacs, Eclipse or Visual Studio? Then you probably know sequences of key combinations that launch one only action. Like Alt\+Shift\+X, T (to run JUnit tests in eclipse)? So keymappings can do that too:

[[[
$a command shift, $b shift. "key sequence (Cmd+Shift+A, Shift+B)"
]]]

Sometimes, you want to configure an action to be activated in two different cases. Those are Keymapping options, and get activated when one of the options gets activated:

[[[
$a command | $b command          "key combination (Cmd+A or Cmd+B)"
]]]

Finally, since Pharo is a cross platform system and it is important to provide a good user experience by with the most suitable shortcut layout, keymapping implements platform specific shortcuts, which get activated only when running in the specific platform:

[[[
$a command win | $b command unix     "Cmd+A on windows, but Cmd+B on unix"
]]]

!! Shortcut configurations

Now you know how to build key combinations for your purposes, you probably want to go to the action. Map those combinations to actions and make them work!

soon more

% Local Variables:
% eval: (flyspell-mode -1)
% End:
