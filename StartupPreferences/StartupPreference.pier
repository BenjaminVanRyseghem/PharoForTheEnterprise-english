! Startup Preference


Pharo support

!! Why 

How can we execute something at startup with Pharo? Traditionally there have been two known ways:

!!! Provide a script file to the VM
Pass a \ct{.st} file as parameter to the VM, that is, you execute the VM like this:

[[[
/Users/mariano/Pharo/VM/Pharo.app/Contents/MacOS/Pharo /Users/mariano/Pharo/images/Pharo-1.4.image startup.st
]]]
 

You execute the VM, pass the Pharo image as parameter and then the file (SD:	is is still working like that?). This will be executed during system startup. What's the problem with this? If you always want to execute the startup in different images you always need to open the image this way, from command line. Moreover, this file is hand-coded and not versioned in Monticello. 

!!! Using the start up list.
Register your own class in the system startup list and implement \ct{startUp} message to do whatever you want to do. The problem is that your class is not present in the distributed images of Pharo. Therefore you need to manually first load my own code and this is not optimal.


!! Saving

!! Default place to look

!! Shared

If you create a folder named \ct{pharo} under \ct{Library/Preferences} and pour

[[[
cd
cd Library/Preferences
mkdir pharo
]]]

-- should it be named settings.st?




!!materials

StartupLoader searches for and executes .st files from certain locations.  To find these it searches for a '.config' folder in the folder next up from where the image file sits.  Then it looks in the next folder up again and so on until reaching the root folder.  When a '.config' folder is found, StartupLoader looks within this for a 'pharo' folder. This contains the startup scripts common to all versions of Pharo, and also optionally a folder per Pharo version holding startup scripts suitable for that version only.  So a typical directory layout might be...

.../some/folders/pharo/Content/Resources/pharo.image.
.../some/folders/pharo/Content/Resources/startup.st
.../some/folders/.config/pharo/author.st
.../some/folders/.config/pharo/useSharedCache.st
.../some/folders/.config/pharo/1.4/mystartupFor14only.st
.../some/folders/.config/pharo/2.0/mystartupFor20only.st

(**Note however that '.config' is an invalid filename on Windows, so '..config' is used instead)

IMPORTANT: StartupLoader will search for a folder '.config' starting from the image directory until the root of the filesystem. What happens if no folder is found? It creates '.config' in the image folder. However, it is recommended that you create the '.config' following the standard, that is, in the $HOME.

To know the real values for you...
Print the result of "FileDirectory preferencesGeneralFolder" which holds the startup scripts common to all versions of Pharo.
Print the result of "FileDirectory preferencesVersionFolder" which holds the startup scripts specific to the version of the current image.

-----------


StartupLoader example

will define a script sample startup.st in your unix root on unix 

Its contents is 

StartupLoader default executeAtomicItems: {
	StartupAtomicItem name: 'Open Help' code: 'Workspace openContents: ''Here is just an example of how to use the StartupLoader.
I should only be displayed once.
	
You can also see StartupLoader class>>#example'' label: ''Help''' isSingleton: true.
	StartupAtomicItem name: 'Open Workspace' code: 'Workspace openContents: ''I should be displayed each time'''.
}

For a more complete example, see StartupLoader class>>#example2





Camillo example

"Put this in ~/Library/Preferences/pharo/ "

Smalltalk isHeadless ifFalse: [
StartupLoader default executeAtomicItems: {
StartupAction name: 'Image Setup' code: [
| color red green yellow white isIssueImage |

"============================================================================="
"some helper blocks for error printing"
color := [:colorCode :text|
    FileStream stderr 
        "set the color"
        nextPut: Character escape; nextPut: $[; print: colorCode; nextPut: $m;
        nextPutAll: text; crlf;
        "reset the color"
        nextPut: Character escape; nextPutAll: '[0m'.
].

red    := [:text| color value: 31 value: text ].
green  := [:text| color value: 32 value: text ].
yellow := [:text| color value: 33 value: text ].
white  := [:text| FileStream stderr nextPutAll: text; crlf ].

"Check whether we use an image for issue reporting"
isIssueImage := Smalltalk imageFile basename first isDigit.

"============================================================================="

Author fullName: 'Camillo Bruni'.

"============================================================================="

[
	yellow value: 'Loading custom preferences'.

	Debugger 
		alwaysOpenFullDebugger: true;
		filterCommonMessageSends: true.


	white value: '- set default fonts'.
	StandardFonts defaultFont: (LogicalFont familyName: 'Consolas' pointSize: 10).
	GraphicFontSettings resetAllFontToDefault.

	white value: '- preparing tools'.
	PolymorphSystemSettings 
		desktopColor: Color gray;
		showDesktopLogo: false.

	"UITheme currentSettings fastDragging: true."

	TextEditorDialogWindow autoAccept: true.

	SHPreferences setStyleTableNamed: 'Tango'.

	UITheme currentSettings
		preferGradientFill: false;
		preferRoundCorner: true;
		menuColor: Color white.

	yellow value: 'loading eclipse icons'.
	isIssueImage ifFalse: [
		(SystemVersion current major >= 3) ifTrue: [
			Gofer new
				smalltalkhubUser: 'estebanlm' project: 'EclipsePack';
				package: 'EclipsePack';
				load.
			ThemeIcons current: EclipseUIThemeIcons new.
			World resetWorldMenu.
			NautilusUI resetIconCaches ]].
	(isIssueImage and: [ Smalltalk isInteractive ])
		ifTrue: [ | slice |
			"open a slice inspector"
			slice := (Smalltalk imageFile basename copyUpTo: $-).
			(MCFileRepositoryInspector repository: (MCHttpRepository inboxRepository) workingCopy: nil)
				versionSearchAccept: slice;
				show.
		]
] fork.

white value: '- enabling TrueType fonts'.
FreeTypeSystemSettings loadFt2Library: true.
"============================================================================="

(Workspace new contents: '';
    openLabel: '')
	width: 1200; height: 230;
	setToAdhereToEdge: #bottomLeft;
	makeUnclosable.

MCWorkingCopyBrowser new show window
	width: 700; height: 230;
	setToAdhereToEdge: #topLeft;
	makeUnclosable.


] 
runOnce: true}].


% Local Variables:
% eval: (flyspell-mode -1)
% End:
