! Startup Preferences

Have ever been wanted to always do the same actions before starting to work with a new image? 
Pharo2.0 supports startup preferences. You can specify actions that are automatically executed
when you launch the system. Startup preferences were implemented by M. Martinez-Peck. This chapter is
an update of his blog that covered this topic. 
Before showing how you can take advantage of startup preferences, we will look at the old way 
to execute automated actions at startup. Then we present startup preferences. 

!! The old way
How can we execute something at startup with Pharo? Traditionally there have been two known ways:

!!! Provide a script file to the VM
Pass a ==.st== file as parameter to the VM, that is, you execute the VM like this:

[[[
/Users/mariano/Pharo/VM/Pharo.app/Contents/MacOS/Pharo /Users/mariano/Pharo/images/Pharo-1.4.image startup.st
]]]
 

You execute the VM, pass the Pharo image as parameter and then the file (SD:	is is still working like that?). This will be executed during system startup. What's the problem with this? If you always want to execute the startup in different images you always need to open the image this way, from command line. Moreover, this file is hand-coded and not versioned in Monticello. 

!!! Using the start up list
Pharo infrastructure offers the possibility for classes to register themselves to a startup list. The system ensures the ==startUp== and ==shutDown== methods of the registered classes are executed during the start up and shut down of the system. 

Therefore you can register your own class in the system startup list and implement ==startUp== message to do whatever you want to do. The problem is that your class is not present in the distributed images of Pharo. Therefore you need to manually first load my own code and this is not optimal. In addition, it is better to keep the startUp list used for system level operations.

Now since Pharo2.0 there is a startup loader that we will present next.

!! StartupLoader

The ==StartupLoader== class searches for and executes ==.st== files from certain locations that we will explain in details below. On mac it looks into your library preferences folder. 

[[[
Library/Preferences/pharo/mystartup.st
Library/Preferences/pharo/2.0/mystartupFor20only.st
Library/Preferences/pharo/3.0/mystartupFor30only.st
]]]

As you see you can structure your preferences depending on the version to which they should be applied. 

!! Locations
To know the locations that are visited to find start up files, you can execute the following expression:

[[[
StartupLoader preferencesGeneralFolder
   File @ /Users/ducasse/Library/Preferences/pharo

StartupLoader preferencesVersionFolder
 File @ /Users/ducasse/Library/Preferences/pharo/3.0
]]]

The message ==preferencesGeneralFolder== returns the location for the startup scripts common to all Pharo versions. 
The message ==preferencesVersionFolder== returns the location for the startup scripts specific to the version of the current image.

The location search order from the most general to the most specific are the following ones: general, version specific or image folder specific. As you can see the order is from the most general to the most specific. Moreover, it does not stop when it finds files in any of the locations, they are  all searched and executed. More specific scripts can even override actions set in more general ones. 

!!!General preference folder
General means that it applied to all Pharo versions. This folder is shared for all the images you open. 
On Mac OSX and Pharo 2.0, it is =='Library/Preferences/pharo/==. In this place, ==StartupLoader== will load ALL existing =.st= files. This type of startup is useful when we have something to execute for all images of all Pharo versions. SD: what is the location on linux an windows? Please add here.


!!!Preference version folder
Now if you want to only get some actions executed for a specific version, define a folder with the version number inside the general preference folder. On Mac OS X, a specific 2.0 folder is ==Library/Preferences/pharo/2.0/'==. This type of startup is useful when we have something to execute for all images of a specific Pharo version.

!!!The image folder
The startup only searches for a file called 'startup.st'. So if you have such a file in the same directory where the image is, then such script will be executed automatically. This type of startup is usually used to do something that is application-specific or something that only makes sense for the specific image you are using. Now you might ask why we don't search the image folder for multiple .st files.  This is because it is normal for the image folder to contain ==.st== files unrelated to preferences â€“ such as from any file out.  Using one specific file 'startup.st' avoids problems. Be careful if you already were sending your own 'startup.st' as parameter to the VM because it will be executed twice. 



You can query whether the StartupLoader is enabled using the messages ==allowStartupScript== and you can change its status using ==allowStartupScript:== sent to the class ==StartupLoader==. 



So you know where the system will search startup files. Now you can directly put your code there and it will be automatically executed during startup. Should we just write scripts there?  Of course not! We use StartUp Actions as we will explain next.


!! Startup Actions

Directly putting code in the files is easy, however, it is not the best choice. For example, what happens if there are certain scripts you want to execute only once on a certain image but some other code that you want to execute each time the image starts? To solve that, among other things, we reify actions into objects of the class ==StartupAction==. Let's see how we use them:

[[[
| items |
items := OrderedCollection new.
items add: (StartupAction
              name: 'Basic settings'
              code: [
                  Author fullName: 'MarianoMartinezPeck'.
                  Debugger alwaysOpenFullDebugger: true.]).
StartupLoader default 
    addAtStartupInPreferenceVersionFolder: items 
    named: 'basicSettings.st'.
]]]

What we do first is to create an instance of ==StartupAction== using the message ==name:code:==. We pass as argument a name and a block that we want to run. In this example, we just set the author identification to 'MarianoMartinezPeck' and we put a setting to always open the debugger (no pre-debugger window). So far nothing special.


The magic comes with the last line, the message #addAtStartupInPreferenceVersionFolder: items named: aFileName  receives a list of startup actions and a filename and stores the actions in a file with the passes argument. So in this case we have only one action called 'Basic Settings' and it will be saved in a file called 'basicSettings.st'. But where? 


Since we used the message ==addAtStartupInPreferenceVersionFolder:named:==  (notice the ==InPreferenceVersionFolder==), it will be created in the following place ==pharo/pharoVersionNumber/==. The message ==addAtStartupInGeneralPreferenceFolder:named:== stores files in the general folder (==pharo==) and the ==addAtStartupInImageDirectory:== stores besides the image. 

Notice that with the first two messages we can specify the file name but with the last one we can't. Remember the last one is always called 'startup.st'. If you are lazy and don't want to think the name yourself, you can just use ==addAtStartupInPreferenceVersionFolder:== which creates a file called =='startupPharoNN.st'== or ==addAtStartupInGeneralPreferenceFolder:== that creates a file named =='startupPharo.st'==.



!! StartupLoader

We saw that when executing the message ==addAtStartupInPreferenceVersionFolder:named:== or any of its variant, a file is created with the code we want to evaluate. Then, when the system starts it will find our file and execute our code. But, how is the resulting file? Exactly as the code we provided? No! Look how our example file is generated. You can find it using the following expression: ==StartupLoader preferencesVersionFolder /' basicSettings.st'==

[[[
StartupLoader default executeAtomicItems: {
StartupAction name: 'Basic settings' code: [Author fullName: 'MarianoMartinezPeck'.
Debugger alwaysOpenFullDebugger: true].
}.
]]]

% Local Variables:
% eval: (flyspell-mode -1)
% End:
